/** 
 * 
 */
package io.sarl.fimu.gui

import io.sarl.fimu.SimulationLauncher
import io.sarl.fimu.environment.AgentBody
import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.IMobileObject
import io.sarl.fimu.environment.ISituatedObject
import io.sarl.fimu.environment.SituatedArtifact
import io.sarl.fimu.environment.WorldModelState
import io.sarl.fimu.events.CreateArea
import io.sarl.fimu.events.EnvironmentEvent
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import javafx.application.Platform
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.scene.canvas.GraphicsContext
import javafx.scene.control.Button
import javafx.scene.layout.Pane
import javafx.scene.paint.Color
import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Shape
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d

class FXMLViewerController implements EventListener {

	private val id : UUID = UUID.randomUUID();

	private var ispace : OpenEventSpace;
	private var launched : boolean = false;
	private var areaCreated : boolean = false;
	var lastState : WorldModelState
	var environment : Environment
	var drawables : HashMap<UUID,Shape> = new HashMap

	@FXML
	private var draw_zone : Pane; 
	@FXML
	private var setup_button : Button;
	@FXML
	private var launch_button : Button;
	@FXML
	private var stop_button : Button;
	
	public def getDrawZoneWidth { 
		draw_zone.getWidth
	}
	
	public def getDrawZoneHeight {
		draw_zone.getHeight 
	}
		/* 
		 * Emit a kill signal wen the app is exited
		 */
	public def cleanExit() {
		if (this.ispace !== null)
			this.ispace.emit(new Exit());
	}

	/* 
	 * Invoked by the SARL agent to register the object on a space
	 */
	public def setGUISpace(ispace : OpenEventSpace) {
		this.ispace = ispace;
		this.ispace.register(this);
	}
	
	/* 
	 * Draw every positions on main canvas
	 */
	public def draw() {		
//		var gc : GraphicsContext = draw_zone.getGraphicsContext2D();
//		//Draw the environment bounds
//		gc.strokeRect(0, 0, environment.spatialDataStructure.bounds.width,
//			environment.spatialDataStructure.bounds.height)
//		
//		//var wait : PauseTransition = new PauseTransition(Duration.seconds(0.03)); 
//		
//		//Uncomment to clear the zone at each step
//		gc.clearRect(0, 0, draw_zone.getWidth(), draw_zone.getHeight());
//		
//		val state = this.lastState
//		if(state === null) return;
//		for (o : state.objects) {
////			System.out.println("Object(x: " + o.position.x + ", y: " + o.position.y + ")") 
//			if (o instanceof AgentBody) {
//				drawBody(o,gc)
//				//drawBoundingBox(o,gc)
//				drawPerceptionRadius(o,gc)
//			}
//		}
//		if(state.hulls != null){
//			for(h : state.hulls) {
//				drawHull(h,gc)	
//			}
//		}
		//System.out.println("Env(x: "+state.envShape.width+", y: "+state.envShape.height+")")
	}
	
	def drawBody(o : AgentBody, gc : GraphicsContext) {
		gc.setFill((o as AgentBody).color)
		var shape = o.shape
		var bounds = o.shape.toBoundingBox
		gc.strokeOval(0,0,2,2)
		if (shape instanceof Circle2d) {
			
			//Shift position to top left
			gc.strokeOval(o.position.x - (bounds.width / 2),
						  o.position.y - (bounds.height / 2),
						  bounds.width,
						  bounds.height)
						  
			//Draw center of the agent (we can comment that on and off for ease of debug	
			gc.fillOval(o.position.x, o.position.y, 1, 1)
			} else if (o.shape instanceof Rectangle2d) {
				gc.fillRect(bounds.minX, bounds.minY, bounds.width, bounds.height)
			} else {
				//Don't draw weird stuff
			}
	}
	
	def drawHull(h : SituatedArtifact, gc : GraphicsContext) {
		var bounds = h.shape.getBounds
		gc.setStroke(Color.BLUEVIOLET)
		gc.strokeRect(bounds.minX, bounds.minY, bounds.width, bounds.height)
	}
	
	def drawBoundingBox(o : AgentBody, gc : GraphicsContext) {
		var bounds = o.shape.toBoundingBox
		gc.setStroke(Color.WHITESMOKE)
		gc.strokeRect(bounds.minX, bounds.minY, bounds.width, bounds.height)
	}
	
	def drawPerceptionRadius(o : AgentBody, gc : GraphicsContext) {
		var rad = environment.getPerceptionRadius
		gc.setStroke(Color.rgb(240, 248, 255, 0.5))
		gc.strokeOval(o.position.x - rad, o.position.y - rad, rad * 2, rad * 2)
	}

	/* 
	 * Catch exit event
	 */
	@FXML
	public def exitApplication(ievent : ActionEvent) {
		ispace.emit(new Exit());
		Platform.exit();
	}
	/* 
	 * Create the simulation agent and set it up
	 */
	@FXML 
	protected def actionSetup() {
//		var ievent : SetupSettings = new SetupSettings(this.getRocketQuantity(), this.getFireQuantity(),
//			this.getGravity(), this.draw_zone.getWidth());
		if (!launched) {
			launch_button.setDisable(false);
			SimulationLauncher.main(this);
			launched = true;
			areaCreated = false;
			setup_button.setDisable(true) 
		}
		//this.ispace.emit(ievent);
	}

	/* 
	 * Launch the simulation
	 */
	@FXML
	protected def actionLaunch() {
		launch_button.setDisable(true);
		stop_button.setDisable(false);
		setup_button.setDisable(true);
		if (!areaCreated) {
			/* Create the environment */
			this.ispace.emit(new CreateArea());
			this.areaCreated = true;
		} else {
			this.ispace.emit(new Freeze(false));
		}
	}
	/* 
	 * Stop the simulation
	 */
	@FXML
	protected def actionStop() {
		stop_button.setDisable(true);
		launch_button.setDisable(false);
		this.ispace.emit(new Freeze(true));
	}
	/* 
	 * Get ID of the object on the space
	 */
	@Override
	public def getID() : UUID {
		return this.id;
	}

	def getShapeFromObject(o : ISituatedObject) : Shape{
		var bounds = o.shape.toBoundingBox
		var shape : Shape
		if(o.shape instanceof Rectangle2d){
			shape = new Rectangle(bounds.minX, bounds.minY, bounds.width, bounds.height)
		}else if(o.shape instanceof Circle2d){
			shape = new Circle(o.position.x, o.position.y, bounds.width/2)
		}
		if(o instanceof AgentBody){
			shape.setFill(o.color)
		}
		shape
	}

	private def moveTo(shape : Shape, o : ISituatedObject) {
		if (o.shape instanceof Circle2d) {
			var s = shape as Circle
			s.translateX = o.position.x - s.centerX
			s.translateY = o.position.y - s.centerY
			s.rotate = Math.toDegrees((o as IMobileObject).angle)

		} else if (o.shape instanceof Rectangle2d) {
			var rshape = o.shape as Rectangle2d
			var s = shape as Rectangle
			s.translateX = o.position.x - rshape.width
			s.translateY = o.position.y + rshape.height
		}
	}
	
	/* 
	 * Needed for implementing EventListener
	 */
	 	public override receiveEvent(^event : Event) {
		if (^event instanceof EnvironmentEvent) {
			/* Probably not the best way ! */
			if (this.environment === null) {
				this.environment = ^event.environment	
			}
			this.lastState = this.environment.state
			
			for(o : ^event.objects){
				if(!drawables.containsKey(o.id)){
					var shape = getShapeFromObject(o)
					drawables.put(o.id,shape)
				}else{
					var shape = drawables.get(o.id)
					shape.moveTo(o)
				}
			}
			if(^event.hulls != null){
				for(o : ^event.hulls){
					
				}
			}
			 Platform.runLater(new Runnable {
                 @Override public def run() {
                     draw_zone.children.all = new ArrayList(drawables.values) 
                 }
             });
			
		}
	}
}
