/** 
 * 
 */
package io.sarl.fimu.gui

import io.sarl.fimu.SimulationLauncher
import io.sarl.fimu.environment.AgentBody
import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.WorldModelState
import io.sarl.fimu.events.CreateArea
import io.sarl.fimu.events.EnvironmentEvent
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.UUID
import javafx.application.Platform
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.scene.canvas.Canvas
import javafx.scene.canvas.GraphicsContext
import javafx.scene.control.Button
import javafx.scene.paint.Color
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d

import static extension io.sarl.fimu.environment.Environment.*

class FXMLViewerController implements EventListener {

	private val id : UUID = UUID.randomUUID();

	private var ispace : OpenEventSpace;
	private var launched : boolean = false;
	private var areaCreated : boolean = false;
	var lastState : WorldModelState
	var environment : Environment

	@FXML
	private var draw_zone : Canvas; 
	@FXML
	private var setup_button : Button;
	@FXML
	private var launch_button : Button;
	@FXML
	private var stop_button : Button;
	
	public def getDrawZoneWidth { 
		draw_zone.getWidth
	}
	
	public def getDrawZoneHeight {
		draw_zone.getHeight 
	}
		/* 
		 * Emit a kill signal wen the app is exited
		 */
	public def cleanExit() {
		if (this.ispace !== null)
			this.ispace.emit(new Exit());
	}

	/* 
	 * Method invoked by the sarl agent to register the object on a space
	 */
	public def setGUISpace(ispace : OpenEventSpace) {
		this.ispace = ispace;
		this.ispace.register(this);
	}
	
	/* 
	 * Draw every positions on main canvas
	 */
	public def draw() {		
		var gc : GraphicsContext = draw_zone.getGraphicsContext2D();
		//var wait : PauseTransition = new PauseTransition(Duration.seconds(0.03)); 
		//Uncomment to clear the zone at each step
		gc.clearRect(0, 0, draw_zone.getWidth(), draw_zone.getHeight());
		
		val state = this.lastState
		if(state === null) return;
		for (o : state.objects) {
//			System.out.println("Object(x: " + o.position.x + ", y: " + o.position.y + ")") 
			if (o instanceof AgentBody) {
				drawBody(o,gc)
				//drawBoundingBox(o,gc)
				drawPerceptionRadius(o,gc)
			}
		}
		//System.out.println("Env(x: "+state.envShape.width+", y: "+state.envShape.height+")")
		//Draw environment bounds
		
	}
	
	def drawBody(o : AgentBody, gc : GraphicsContext) {
		gc.setFill((o as AgentBody).color)
		var shape = o.shape
		var bounds = o.shape.toBoundingBox
		if (shape instanceof Circle2d) {
			//Shift position to top left
			gc.strokeOval(o.position.x - (bounds.width / 2),
						  o.position.y - (bounds.height / 2),
						  bounds.width,
						  bounds.height)
			//Draw center (we can comment that on and off for ease of debug	
			gc.fillOval(o.position.x, o.position.y, 1, 1)
			} else if (o.shape instanceof Rectangle2d) {
				gc.fillRect(bounds.minX, bounds.minY, bounds.width, bounds.height)
			} else {
				//Don't draw weird stuff
			}
	}
	
	def drawBoundingBox(o : AgentBody, gc : GraphicsContext) {
		var bounds = o.shape.toBoundingBox
		gc.setStroke(Color.WHITESMOKE)
		gc.strokeRect(bounds.minX, bounds.minY, bounds.width, bounds.height)
	}
	
	def drawPerceptionRadius(o : AgentBody, gc : GraphicsContext) {
		var rad = environment.getPerceptionRadius
		gc.setStroke(Color.rgb(240, 248, 255, 0.5))
		gc.strokeOval(o.position.x - rad, o.position.y - rad, rad * 2, rad * 2)
	}

	/* 
	 * Catch exit event
	 */
	@FXML
	public def exitApplication(ievent : ActionEvent) {
		ispace.emit(new Exit());
		Platform.exit();
	}
	/* 
	 * Create the simulation agent and set it up
	 */
	@FXML 
	protected def actionSetup() {
//		var ievent : SetupSettings = new SetupSettings(this.getRocketQuantity(), this.getFireQuantity(),
//			this.getGravity(), this.draw_zone.getWidth());
		if (!launched) {
			launch_button.setDisable(false);
			SimulationLauncher.main(this);
			launched = true;
			areaCreated = false;
			setup_button.setDisable(true) 
		}
		//this.ispace.emit(ievent);
	}

	/* 
	 * Launch fireworks
	 */
	@FXML
	protected def actionLaunch() {
		launch_button.setDisable(true);
		stop_button.setDisable(false);
		setup_button.setDisable(true);
		if (!areaCreated) {
			this.ispace.emit(new CreateArea());
			this.areaCreated = true;
		} else {
			this.ispace.emit(new Freeze(false));
		}
	}
	/* 
	 * Stop fireworks
	 */
	@FXML
	protected def actionStop() {
		stop_button.setDisable(true);
		launch_button.setDisable(false);
		this.ispace.emit(new Freeze(true));
	}
	/* 
	 * Get ID of the object on the space
	 */
	@Override
	public def getID() : UUID {
		return this.id;
	}
	/* 
	 * Needed for implementing EventListener
	 */
	@Override
	public def receiveEvent(^event : Event) {
		if (^event instanceof EnvironmentEvent) {
			if (this.environment === null) {
				this.environment = ^event.environment
				var gc : GraphicsContext = draw_zone.getGraphicsContext2D();
				gc.strokeRect(0, 0, environment.spatialDataStructure.bounds.width,
					environment.spatialDataStructure.bounds.height)
			}
			this.lastState = this.environment.state
			draw
		}
	}
	
}
