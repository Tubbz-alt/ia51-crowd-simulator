/** 
 * 
 */
package io.sarl.fimu.gui

import io.sarl.fimu.SimulationLauncher
import io.sarl.fimu.environment.AgentBody
import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.IMobileObject
import io.sarl.fimu.environment.ISituatedObject
import io.sarl.fimu.environment.WorldModelState
import io.sarl.fimu.events.CreateArea
import io.sarl.fimu.events.EnvironmentEvent
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import javafx.application.Platform
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.scene.control.Button
import javafx.scene.layout.Pane
import javafx.scene.paint.Color
import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Shape
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d

class FXMLViewerController implements EventListener {

	private val id : UUID = UUID.randomUUID();

	private var ispace : OpenEventSpace;
	private var launched : boolean = false;
	private var areaCreated : boolean = false;
	var lastState : WorldModelState
	var environment : Environment
	var drawables : HashMap<UUID,Shape> = new HashMap
	var drawablePerceptionRadiuses : HashMap<UUID, Shape> = new HashMap
	var perceptionRadius : double
	
	var showPerceptionRadiuses : boolean = false

	@FXML
	private var draw_zone : Pane; 
	@FXML
	private var setup_button : Button;
	@FXML
	private var launch_button : Button;
	@FXML
	private var stop_button : Button;
	
	public def getDrawZoneWidth { 
		draw_zone.getWidth
	}
	
	public def getDrawZoneHeight {
		draw_zone.getHeight 
	}
		/* 
		 * Emit a kill signal wen the app is exited
		 */
	public def cleanExit() {
		if (this.ispace !== null)
			this.ispace.emit(new Exit());
	}

	/* 
	 * Invoked by the SARL agent to register the object on a space
	 */
	public def setGUISpace(ispace : OpenEventSpace) {
		this.ispace = ispace;
		this.ispace.register(this);
	}

	/* 
	 * When the user closes the app, send the exit event to the simulator so it can cleanly close all the other agents, then himself
	 */
	@FXML
	public def exitApplication(ievent : ActionEvent) {
		ispace.emit(new Exit());
		Platform.exit();
	}
	
	@FXML
	public def actionShowRadiuses(ievent : ActionEvent) {
		this.showPerceptionRadiuses = !showPerceptionRadiuses	
	}
	
	/* 
	 * Create the simulation agent and set it up
	 */
	@FXML 
	protected def actionSetup() {
		if (!launched) {
			launch_button.setDisable(false);
			SimulationLauncher.main(this);
			launched = true;
			areaCreated = false;
			setup_button.setDisable(true) 
		}
	}

	/* 
	 * Launch the simulation
	 */
	@FXML
	protected def actionLaunch() {
		launch_button.setDisable(true);
		stop_button.setDisable(false);
		setup_button.setDisable(true);
		if (!areaCreated) {
			/* Create the environment */
			this.ispace.emit(new CreateArea());
			this.areaCreated = true;
		} else {
			this.ispace.emit(new Freeze(false));
		}
	}
	/* 
	 * Stop the simulation
	 */
	@FXML
	protected def actionStop() {
		stop_button.setDisable(true);
		launch_button.setDisable(false);
		this.ispace.emit(new Freeze(true));
	}
	/* 
	 * Get ID of the object on the space
	 */
	@Override
	public def getID() : UUID {
		return this.id;
	}

	def getShapeFromObject(o : ISituatedObject) : Shape{
		var bounds = o.shape.toBoundingBox
		var shape : Shape
		if(o.shape instanceof Rectangle2d){
			shape = new Rectangle(bounds.minX, bounds.minY, bounds.width, bounds.height)
		}else if(o.shape instanceof Circle2d){
			shape = new Circle(o.position.x, o.position.y, bounds.width/2)
		}
		if(o instanceof AgentBody){
			shape.setFill(o.color)
		}
		shape
	}
	
	def getPerceptionRadiusShapeFromObject(o : AgentBody) : Shape {	
		var shape = new Circle(o.position.x, o.position.y, this.perceptionRadius)
		shape.setStroke(Color.rgb(240, 248, 255, 0.5))
		shape.setFill(null)
		shape
	}
	
	private def moveTo(shape : Shape, o : ISituatedObject) {
		if (shape instanceof Circle) {
			var s = shape as Circle
			s.translateX = o.position.x - s.centerX
			s.translateY = o.position.y - s.centerY
			s.rotate = Math.toDegrees((o as IMobileObject).angle)

		} else if (shape instanceof Rectangle) {
			var rshape = o.shape as Rectangle2d
			var s = shape as Rectangle
			s.translateX = o.position.x - rshape.width
			s.translateY = o.position.y + rshape.height
		}
	}
		/* 
		 * Handle events
		 */
	public override receiveEvent(^event : Event) {
		if (^event instanceof EnvironmentEvent) {
			if (this.environment === null) {
				this.environment = ^event.environment	
			}
			this.lastState = this.environment.state
			this.perceptionRadius = ^event.perceptionRadius

			for(o : ^event.objects){
				if(!drawables.containsKey(o.id)){
					var shape = getShapeFromObject(o)
					drawables.put(o.id, shape)
					if (o instanceof AgentBody && showPerceptionRadiuses) {
						var percep = getPerceptionRadiusShapeFromObject(o as AgentBody)
						drawablePerceptionRadiuses.put(o.id, percep)
					}
				}else{
					var shape = drawables.get(o.id)
					shape.moveTo(o)
					if (o instanceof AgentBody && showPerceptionRadiuses) {
						var percep = drawablePerceptionRadiuses.get(o.id)
						percep.moveTo(o)
					}
				}
			}

			Platform.runLater(new Runnable {
                @Override public def run() {
                    draw_zone.children.all = new ArrayList(drawables.values) 
                    draw_zone.children.addAll(new ArrayList(drawablePerceptionRadiuses.values))
                }
            });
		}
	}
}
