/** 
 * 
 */
package io.sarl.fimu.events

import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.ISituatedObject
import io.sarl.fimu.environment.Influence
import io.sarl.fimu.environment.Percept
import io.sarl.fimu.environment.SituatedArtifact
import io.sarl.fimu.utils.time.TimePercept
import java.util.List

/* 
 * Trigger the launching area for starting the demo
 */
event Launch

/* 
 * Setup the Area
 */
event CreateArea

/* 
 * Make a rocket explode
 */
event Explode

/* 
 * Ask a rocket to kill itself
 */
event KillRocket
/* 
 * Ask a fire to kill itself
 */
event KillFire

/* 
 * Say that a rocket is ready
 */
event RocketReady
/* 
 * Trigger a rocket to update it's position
 */
event UpdateRocketPosition

/* 
 * Trigger a fire to update it's position
 */
event UpdateFirePosition
/* 
 * Say that a fire is ready
 */
event FireReady

/* 
 * Makes a fire spray everywhere
 */
event SprayFire
/* 
 * Triggered when the app need to be exited
 */
event Exit

/* 
 * Carry all setup informations, send by the GUI
 */
event SetupSettings {
	var rocketsQuantity : Integer
	var fireQuatity : Integer
	var gravity : Double
	var maxWidth : Double

	new(rq : Integer, fq : Integer, grav : Double, max : Double) {
		rocketsQuantity = rq
		fireQuatity = fq
		gravity = grav
		maxWidth = max
	}
}
/* 
 * Freeze signal send by the GUI
 */
event Freeze {
	var value : boolean

	new (value : boolean) {
		this.value = value
	}
}

event EnvironmentStateChanged {
	val objects : Iterable<? extends ISituatedObject>
	
	new (o : Iterable<? extends ISituatedObject>) {
		this.objects = o
	}
}

event InfluenceEvent {
	val influences : List<Influence>

	new (e : Influence*) {
		this.influences = e
	}
}

event PerceptionEvent {
	val body : Percept
	val time : TimePercept
	val perceptions : List<Percept>

	new (p : List<Percept>, b : Percept, t : TimePercept) {
		this.perceptions = p
		this.body = b
		this.time = t
	}
}
/*
 * This event is fired by the Simulator agent when it is set up 
 */
event SimulationAgentReady

event StartSimulation

event StopSimulation


/*
 * Environment has changed ! 
 */
event EnvironmentEvent {
	val environment : Environment
	var objects : Iterable<ISituatedObject>
	var hulls : Iterable<SituatedArtifact>
	var perceptionRadius : double
	new(e : Environment){
		environment = e
		objects = e.allObjects
		hulls = e.hulls
		perceptionRadius = e.perceptionRadius
	}
}
