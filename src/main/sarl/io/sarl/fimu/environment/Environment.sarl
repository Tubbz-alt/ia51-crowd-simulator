package io.sarl.fimu.environment

import io.sarl.fimu.environment.frustum.CircleFrustum
import io.sarl.fimu.events.EnvironmentEvent
import io.sarl.fimu.utils.time.StepTimeManager
import io.sarl.fimu.utils.time.TimeManager
import io.sarl.fimu.utils.tree.tree4d.QuadTree
import io.sarl.lang.core.EventListener
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javafx.scene.paint.Color
import org.arakhne.afc.math.MathConstants
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author LÃ©on
 * Main Environment class. It is supposed to hold and manage all the agents
 */
class Environment {

	static val PERCEPTION_RADIUS = 150.0
	static val NORMAL_PERSON_SIZE = 5.0
	static val NORMAL_TOILET_W = 15.0
	static val NORMAL_TOILET_H = 10.0
	static val NORMAL_SCENE_W = 150.0
	static val NORMAL_SCENE_H = 75.0
	static val NORMAL_STAND_W = 45.0
	static val NORMAL_STAND_H = 20.0
	
	var model = new QuadTree<ISituatedObject>
	val agentBodyList : Map<UUID, AgentBody> = new TreeMap
	val width : double
	val height : double
	var hulls : QuadTree<SituatedArtifact>
	
	val init = new AtomicBoolean(true)
	var listener : EventListener
	var timeManager : TimeManager
	val stateChanged = new AtomicBoolean

	new (width : double, height : double) {
		this.width = width
		this.height = height
		this.timeManager = new StepTimeManager(500)
		this.model.initialize(new Rectangle2d(0.0, 0.0, width, height))
	}
	
	def getHulls : Iterable<SituatedArtifact>{
		this.hulls?.data
	}
	def getPerceptionRadius : double{
		return PERCEPTION_RADIUS as double
	}
	def getTimeManager : TimeManager{
		return timeManager
	}
	
	def getAgentBody(id : UUID) : AgentBody {
		synchronized (this.agentBodyList) {
			this.agentBodyList.get(id)
		}	
	}
	
	def getAgentBodies : Iterable<AgentBody> {
		synchronized (this.agentBodyList) {
			return Collections.unmodifiableCollection(this.agentBodyList.values)
		}
	}
	
	def getSpatialDataStructure : SpatialDataStructure<ISituatedObject> { 
		synchronized(this.model){
			return this.model
		}
	}
	
	def getAllObjects : Iterable<ISituatedObject> { 
		synchronized(this.model){
			var s = this.model.getData
	//		System.out.println("All objects : "+s.size)
			s
		}
	}
	
def applyInfluences(motionInfluences : Collection<MotionInfluence>, otherInfluences : Collection<Influence>, timeManager : TimeManager) {
		var actionTree : QuadTree<SituatedArtifact> = new QuadTree
		actionTree.initialize(new Rectangle2d(0.0, 0.0, this.width, this.height))

		// Consider other influences
		for (influence : otherInfluences) {
//			if (influence instanceof RemoveInfluence) {
//				// TODO assert (this.mouseTarget != null);
//				this.dataStructure.removeData(this.mouseTarget)
//				this.mouseTarget = null
//				stateChanged
//			} else if (influence instanceof TargetAdditionInfluence) {
//				// TODO assert (this.mouseTarget == null);
//				this.mouseTarget = new MouseTarget(influence.position.x, influence.position.y)
//				this.dataStructure.addData(this.mouseTarget)
//				stateChanged
//			} else if (influence instanceof TeletransportInfluence) {
//				// TODO assert (this.mouseTarget != null);
//				this.dataStructure.removeData(this.mouseTarget)
//				this.mouseTarget.setMousePosition(influence.position, this.timeManager.lastStepDuration, this.width,
//					this.height)
//				this.dataStructure.addData(this.mouseTarget)
//				stateChanged
//			} else if (influence instanceof TypeChangeInfluence) {
//				var id = influence.influencedObject
//				if (id === null) {
//					id = influence.emitter
//				}
//				if (id !== null) {
//					var body = getAgentBodyFor(id)
//					if (body !== null) {
//						body.type = influence.type
//					}
//				}
//				stateChanged
			}
		
		// Put the influences in a spatial tree
		for (mi : motionInfluences) {
			var id = mi.influencedObject
			if (id === null) {
				id = mi.emitter
			}
			var body = getAgentBody(id)

			var linearMotion : Vector2d
			var angularMotion : double
			
			linearMotion = body.computeKinematicTranslation(mi.linearInfluence, this.timeManager)
			angularMotion = body.computeKinematicRotation(mi.angularInfluence, this.timeManager)
			
			actionTree.addData(new SituatedArtifact(body, linearMotion, angularMotion))
			this.hulls = actionTree
		}

		//
		// Detect conflicts
		this.hulls = actionTree
		actionTree.detectConflictsSAT

		//
		// Apply Actions
		for (action : actionTree.data) {
			var obj = action.object
			if (!action.empty && obj !== null) {
				/* I think that sometimes, objects are not inserted back into the tree 
				 * Remove object from the tree, make it move and then put it back in the correct child
				 */
				var b : boolean
				synchronized (this.model){
					b = this.model.removeData(obj)
					obj.move(action.linearMotion, action.angularMotion)
					b = this.model.addData(obj)
				}
			}
		}
	}

	/* Detect the conflicts between all the motion influences
	 * The broad detection part should have already been done. 
	 * SAT stands for Separation Axis Theorem
	 * @param actionTree : contains all the actions, separated two by two
	 */
	private def detectConflictsSAT(actionTree : QuadTree<SituatedArtifact>){
		var iterator = actionTree.iterator
		/* Loop over actions two by two*/
		while(iterator.hasNext){
			var node = iterator.next
			
			var influences = new ArrayList(node.data)
			if(influences.size == 0 ) break
			 
			var inf1 = influences.get(0)
			var shape1 = inf1.shape.bounds
			var inf2 : SituatedArtifact
			if(influences.size()>1){
				inf2 = influences.get(1)
			}
						
			/* Make sure we are not overlapping with any object that isn't an agent body (we'll check those later) */
			for (obj : this.allObjects) {
				if (! (obj instanceof AgentBody)) {
					var bounds = obj.shape.toBoundingBox
					if (!inf1.empty && shape1.intersects(bounds)){
						inf1.clear
					}
					if(inf2 !== null){
						if (!inf2.empty && inf2.shape.toBoundingBox.intersects(bounds)) {
							inf2.clear
						}	
					}
				}
			}
			
			/* If none of the influences have been cleared at the last step */
			if (!inf1.empty && inf2 !== null && !inf2.empty) {
				if (shape1.intersects(inf2.shape.bounds)) {
					inf2.clear
				}
			}
		}
	}
	
	/* 
	 * Notifies listeners about changes in the environment.
	 */
	def fireEnvironmentChange {
		var ^event = new EnvironmentEvent(this)
		listener.receiveEvent(^event)
		
	}

	def getState : WorldModelState {
		new WorldModelState(this)
	}
	
	def runBehavior {
//		System.out.println("Running environment CLASS behavior")
		if (this.init.getAndSet(false)) {
			fireEnvironmentChange
		}

		this.stateChanged.set(false)

		var motionInfluences = new ArrayList<MotionInfluence>
		var otherInfluences = new ArrayList<Influence>
		
		var bodies : List<AgentBody>
		
		synchronized (this.agentBodyList) {
			
			bodies = new ArrayList(this.agentBodyList.size)
			bodies.addAll(this.agentBodyList.values)
		
		}
		
		for(body : bodies) {
			var mi = body.consumeMotionInfluence
			if (mi !== null) {
				motionInfluences += mi
			}
			
			for (i : body.consumeOtherInfluences) {
				if (i instanceof KillInfluence) {
					stateChanged()
					var rbody : AgentBody
					synchronized (this.agentBodyList) {
						rbody = (this.agentBodyList -= i.emitter)
					}
					if (rbody !== null) {
						rbody.onAgentBodyDestroyed
					}
				} else {
					otherInfluences += i
				}
			}
		}

		if (!motionInfluences.isEmpty || !otherInfluences.isEmpty) {
			//Only apply motion Influences for now
			applyInfluences(motionInfluences, otherInfluences, this.timeManager)
		}
		
		if (this.stateChanged.get) {
			fireEnvironmentChange
		}

		this.timeManager.increment

		var list : List<Percept>
		for (body : bodies) {
			list = body.computePerceptions
			body.setPerceptions(list ?: emptyList)
		}	
	}

	/*
	 * Compute this agent's body perceptions
	 */
	def computePerceptions(^agent : AgentBody) : List<Percept> {
		var percepts = new ArrayList<Percept>
		var frustum = ^agent.frustum
		if (frustum !== null) {
			var frustumShape = frustum.toShape(^agent.position, ^agent.direction)
			synchronized(this.model){
				var dataIterator = this.model.dataIterator(frustumShape)
				var filteringIterator = frustum.filter(dataIterator)
				while (filteringIterator.hasNext) {
					var obj = filteringIterator.next
					percepts += new Percept(obj)
				}
			}
			
		}
		return percepts
	}

	def onAgentBodyCreated(body : AgentBody) {
			this.model.addData(body)
	}

	def onAgentBodyDestroyed(body : AgentBody) {
			this.model.removeData(body)
	}
	
	protected final def computeSteeringTranslation(obj : IMobileObject, move : Vector2d, clock : TimeManager) : Vector2d {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeSteeringTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj")
	}

	protected final def computeKinematicTranslation(obj : IMobileObject, move : Vector2d, clock : TimeManager) : Vector2d {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj")
	}
	
	protected final def computeKinematicRotation(obj : IMobileObject, move : double, clock : TimeManager) : double {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicRotation(move, clock)
		}
		throw new IllegalArgumentException("obj")
	}

	protected final def move(obj : IMobileObject, instantTranslation : Vector2d, instantRotation : double) {
		if (obj instanceof AbstractMobileObject) {
			var duration = this.timeManager.lastStepDuration
			obj.move(instantTranslation.x, instantTranslation.y, duration, this.width, this.height)
			obj.rotate(instantRotation, duration)
			stateChanged()
		} else {
			throw new IllegalArgumentException("obj")
		}
	}

	protected def stateChanged {
		this.stateChanged.set(true)
	}

	private def createBody(type : String) {
		var id = UUID::randomUUID
		
		// Different body shapes and colors based on whether the agent is a FimuGoer, a Scene, a Toilet, etc. 
		var shape : Shape2d
		var color : Color
		var position : Point2d
		if (type == "PELO" || type == "FIMUGOER")
		{
			shape = new Circle2d(0.0, 0.0, NORMAL_PERSON_SIZE)
			color = Color.ANTIQUEWHITE
			position = randomPosition(NORMAL_PERSON_SIZE, NORMAL_PERSON_SIZE)
		}
		else if (type == "TOILETS")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_TOILET_W, NORMAL_TOILET_H)
			color = Color.DARKKHAKI
			position = randomPosition(NORMAL_TOILET_W, NORMAL_TOILET_H)
		}
		else if (type == "DRINKSTAND" || type == "FOODSTAND")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_STAND_W, NORMAL_STAND_H)
			color = Color.AQUAMARINE
			position = randomPosition(NORMAL_STAND_W, NORMAL_STAND_H)
		}
		else if (type == "SCENE")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_SCENE_W, NORMAL_SCENE_H)
			color = Color.CADETBLUE
			position = randomPosition(NORMAL_SCENE_H, NORMAL_SCENE_H)
		}
		System.out.println("Type : " + type + " Pos : " + Math.round(position.x) + ", " + Math.round(position.y))
		var body = new AgentBody(id,    
								 shape, // body
								 3, // max linear speed m/s
							 	 3, // max linear acceleration (m/s)/s
								 MathConstants::PI / 4, // max angular speed r/s
								 MathConstants::PI /10, // max angular acceleration (r/s)/s
								 new CircleFrustum(id, PERCEPTION_RADIUS),
								 color);
		// body.name = MessageFormat::format("Body #{0}", this.agentBodyNumber + 1)
		body.type = type 
		addAgentBody(body, randomPosition, Math::random as double * MathConstants::TWO_PI)
	}

	def createPelo {
		createBody("PELO")
	}

	def createFimuGoer {
		createBody("FIMUGOER")
	}

	def createScene {
		createBody("SCENE")
	}

	def createFoodStand {
		createBody("FOODSTAND")
	}

	def createDrinkStand {
		createBody("DRINKSTAND")
	}

	def createToilets {
		createBody("TOILETS")
	}

	protected def randomPosition : Point2d {
		var x = Math::random as double * this.width - NORMAL_PERSON_SIZE
		var y = Math::random as double * this.height - NORMAL_PERSON_SIZE
		return new Point2d(x, y)
	}

	protected def randomPosition(width : double, height : double) : Point2d {
		var tmp_x = 0.0;
		var tmp_y = 0.0;
		var x : double;
		var y : double;
		var collision = false;

		do {
			tmp_x = Math::random as double * (this.width - 2*width) + width
			tmp_y = Math::random as double * (this.height - 2*height) + height
			do {
				collision = false;
				for (body : agentBodies) {
					if (collisionDetection(new Point2d(tmp_x, tmp_y), width, height, body.position,
						body.shape.toBoundingBox.width, body.shape.toBoundingBox.height)) {
						tmp_y += 50
						collision = true;
						break
					}
				}
				if (collision == false) {
					y = tmp_y;
				} else {
					tmp_y += 50
				}

			} while (y == 0.0 && tmp_y + height + 50 < this.height)
			if (y != 0.0) {
				x = tmp_x
			}
		} while (x == 0.0)

		return new Point2d(x, y)
	}

	protected def collisionDetection(pos1 : Point2d, w1 : double, h1 : double, pos2 : Point2d, w2 : double,
		h2 : double) : Boolean {
		var offset = 10;
		if (pos1.x + w1 < pos2.x - w2 - offset || pos1.x - w1 > pos2.x + w2 + offset ||
			pos1.y + h1 < pos2.y - h2 - offset || pos1.y - h1 > pos2.y + h2 + offset) {
			return false
		} else {
			return true
		}
	}

	protected synchronized def addAgentBody(body : AgentBody, position : Point2d, direction : double) {
		if (this.init.get) {
			synchronized (this.agentBodyList) {
				this.agentBodyList.put(body.id, body)
			}
			if(body.shape instanceof Circle2d){
				(body.shape as Circle2d).center = position
			}
			if (body.shape instanceof Rectangle2d) {
				(body.shape as Rectangle2d).center = position
			}
			body.position = position
			body.angle = direction
			body.onAgentBodyCreated
		} else {
			throw new IllegalStateException("You cannot call this function after the start of the simulation");
		}
	}

	def getAgentBodyNumber : int {
		synchronized (this.agentBodyList) {
			return this.agentBodyList.size
		}
	}

	def addListener(listener : EventListener) {
			this.listener = listener
	}
}
