/** 
 * 
 */
package io.sarl.fimu.environment

import io.sarl.fimu.environment.frustum.CircleFrustum
import io.sarl.fimu.events.EnvironmentEvent
import io.sarl.fimu.utils.time.StepTimeManager
import io.sarl.fimu.utils.time.TimeManager
import io.sarl.fimu.utils.tree.iterator.LeafTreeIterator
import io.sarl.fimu.utils.tree.tree4d.QuadTree
import io.sarl.lang.core.EventListener
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javafx.scene.paint.Color
import org.arakhne.afc.math.MathConstants
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author LÃ©on
 * Main Environment class. It is supposed to hold and manage all the agents
 */
class Environment {

	static val PERCEPTION_RADIUS = 150.0
	static val NORMAL_PERSON_SIZE = 5.0
	static val NORMAL_TOILET_W = 15.0
	static val NORMAL_TOILET_H = 10.0
	static val NORMAL_SCENE_W = 150.0
	static val NORMAL_SCENE_H = 75.0
	static val NORMAL_STAND_W = 45.0
	static val NORMAL_STAND_H = 20.0
	
	var model = new QuadTree<ISituatedObject>
	val agentBodyList : Map<UUID, AgentBody> = new TreeMap
	val width : double
	val height : double
	
	val init = new AtomicBoolean(true)
	var listener : EventListener
	var timeManager : TimeManager
	val stateChanged = new AtomicBoolean

	new (width : double, height : double) {
		this.width = width
		this.height = height
		this.timeManager = new StepTimeManager(500)
		this.model.initialize(new Rectangle2d(0.0, 0.0, width, height))
	}
	
	def getPerceptionRadius : double{
		return PERCEPTION_RADIUS as double
	}
	def getTimeManager : TimeManager{
		return timeManager
	}
	
	def getAgentBody(id : UUID) : AgentBody {
		synchronized (this.agentBodyList) {
			this.agentBodyList.get(id)
		}	
	}
	
	def getAgentBodies : Iterable<AgentBody> {
		synchronized (this.agentBodyList) {
			return Collections.unmodifiableCollection(this.agentBodyList.values)
		}
	}
	
	def getSpatialDataStructure : SpatialDataStructure<ISituatedObject> { 
		this.model
	}
	
	def getAllObjects : Iterable<ISituatedObject> { 
		var s = this.model.getData
//		System.out.println("All objects : "+s.size)
		s
	}
	
//	def applyInfluences(motionInfluences : Collection<MotionInfluence>) {
//		System.out.println("Apply influences")
//		
//		var influenceList = new ArrayList(motionInfluences)
//		var actions = new ArrayList<AnimatAction>(influenceList.size)
//		
//		for (index1 : 0 ..< influenceList.size) {
//			var inf1 = influenceList.get(index1)
//			var body1 = getAgentBody(inf1.emitter)
//			if (body1 !== null) {
//				var move : Vector2d
//				var rotation : double
//				if (inf1.type === DynamicType::STEERING) {
//					move = body1.computeSteeringTranslation(inf1.linearInfluence/*, timeManager*/)
//					rotation = body1.computeSteeringRotation(inf1.angularInfluence/*, timeManager*/)
//				} else {
//					move = body1.computeKinematicTranslation(inf1.linearInfluence/* , timeManager*/)
//					rotation = body1.computeKinematicRotation(inf1.angularInfluence/* , timeManager*/)
//				}
//
//				var body1Bounds = body1.shape
//
//				// Trivial collision detection
//				//trivialCollisionDetection(index1, influenceList, body1Bounds, move)
//
//				actions += new AnimatAction(body1, move, rotation)
//
//			}
//		}

		// Apply the actions
//		for (action : actions) {
//			var body = action.objectToMove
//			if (body !== null) {
//				body.move(action.translation, action.rotation)
//			}
//		}
//
	//	}
def applyInfluences(motionInfluences : Collection<MotionInfluence>, otherInfluences : Collection<Influence>, timeManager : TimeManager) {
		var actionTree : QuadTree<SituatedArtifact> = new QuadTree
//		var root : QuadTreeNode<SituatedArtifact> = new QuadTreeNode(new Rectangle2d(0.0, 0.0, this.width, this.height))
//		actionTree.setRoot(root)
		actionTree.initialize(new Rectangle2d(0.0, 0.0, this.width, this.height))
		//
		// Consider other influences
		for (influence : otherInfluences) {
//			if (influence instanceof RemoveInfluence) {
//				// TODO assert (this.mouseTarget != null);
//				this.dataStructure.removeData(this.mouseTarget)
//				this.mouseTarget = null
//				stateChanged
//			} else if (influence instanceof TargetAdditionInfluence) {
//				// TODO assert (this.mouseTarget == null);
//				this.mouseTarget = new MouseTarget(influence.position.x, influence.position.y)
//				this.dataStructure.addData(this.mouseTarget)
//				stateChanged
//			} else if (influence instanceof TeletransportInfluence) {
//				// TODO assert (this.mouseTarget != null);
//				this.dataStructure.removeData(this.mouseTarget)
//				this.mouseTarget.setMousePosition(influence.position, this.timeManager.lastStepDuration, this.width,
//					this.height)
//				this.dataStructure.addData(this.mouseTarget)
//				stateChanged
//			} else if (influence instanceof TypeChangeInfluence) {
//				var id = influence.influencedObject
//				if (id === null) {
//					id = influence.emitter
//				}
//				if (id !== null) {
//					var body = getAgentBodyFor(id)
//					if (body !== null) {
//						body.type = influence.type
//					}
//				}
//				stateChanged
			}
		//
		// Put the influences in a spatial tree
		for (mi : motionInfluences) {
			var id = mi.influencedObject
			if (id === null) {
				id = mi.emitter
			}
			var body = getAgentBody(id)

			var linearMotion : Vector2d
			var angularMotion : double
			
			linearMotion = body.computeKinematicTranslation(mi.linearInfluence, this.timeManager)
			angularMotion = body.computeKinematicRotation(mi.angularInfluence, this.timeManager)
			

			actionTree.addData(new SituatedArtifact(body, linearMotion, angularMotion))
		}

		//
		// Detect conflicts
		actionTree.detectConflicts

		//
		// Apply Actions
		for (action : actionTree.data) {
			var obj = action.object
			if (!action.empty && obj !== null) {
				var b = this.model.removeData(obj)
				// TODO assert (b) : "Object cannot be removed from quadtree: " + obj;
				obj.move(action.linearMotion, action.angularMotion)
				b = this.model.addData(obj)
				// TODO assert (b) : "Object cannot be added in quadtree: " + obj;
			}
		}
	}

	private def detectConflicts(actionTree : QuadTree<SituatedArtifact>) {
		var iterator = new LeafTreeIterator(actionTree.root)
		while (iterator.hasNext) {
			var node = iterator.next
			var influences : List<SituatedArtifact> = new ArrayList
			do {
				influences += node.data
				node = node.parent
			} while (node !== null)
			for (i : 0 ..< influences.size) {
				var inf1 = influences.get(i)
				if (!inf1.isEmpty) {
					var s1 = inf1.shape as MotionHull
					for (obj : this.allObjects) {
						if ((!(obj instanceof AgentBody)) && (s1.intersects(obj.shape))) {
							inf1.clear
							return
						}
					}
					if (!inf1.empty && i < influences.size - 1) {
						for (j : (i + 1) ..< influences.size) {
							var inf2 = influences.get(j)
							if (!inf2.empty) {
								if (s1.intersects(inf2.shape)) {
									inf2.clear
								}
							}
						}
					}
				}
			}
		}
	}
	
	/* 
	 * Notifies listeners about changes in the environment.
	 */
	def fireEnvironmentChange {
		var ^event = new EnvironmentEvent(this)
		listener.receiveEvent(^event)
		
	}

	def getState : WorldModelState {
		new WorldModelState(this)
	}
	
	def runBehavior {
		System.out.println("Running environment CLASS behavior")
		if (this.init.getAndSet(false)) {
			fireEnvironmentChange
		}

		this.stateChanged.set(false)

		var motionInfluences = new ArrayList<MotionInfluence>
		var otherInfluences = new ArrayList<Influence>
		
		var bodies : List<AgentBody>
		
		synchronized (this.agentBodyList) {
			
			bodies = new ArrayList(this.agentBodyList.size)
			bodies.addAll(this.agentBodyList.values)
		
		}
		
		for(body : bodies) {
			var mi = body.consumeMotionInfluence
			if (mi !== null) {
				motionInfluences += mi
			}
			
			for (i : body.consumeOtherInfluences) {
				if (i instanceof KillInfluence) {
					stateChanged()
					var rbody : AgentBody
					synchronized (this.agentBodyList) {
						rbody = (this.agentBodyList -= i.emitter)
					}
					if (rbody !== null) {
						rbody.onAgentBodyDestroyed
					}
				} else {
					otherInfluences += i
				}
			}
		}

		/*
		 * Compute endogenous behavior influences : anything that is fired by the environment itself, and not an agent
		 */
//		for (i : computeEndogenousBehaviorInfluences) {
//			if (i instanceof MotionInfluence) {
//				motionInfluences += i
//			} else if (!(i instanceof KillInfluence)) {
//				otherInfluences += i
//			}
		// }
		if (!motionInfluences.isEmpty || !otherInfluences.isEmpty) {
			//Only apply motion Influences for now
			applyInfluences(motionInfluences, otherInfluences, this.timeManager)
		}
		
		if (this.stateChanged.get) {
			fireEnvironmentChange
		}

		this.timeManager.increment

		var list : List<Percept>
		for (body : bodies) {
			list = body.computePerceptions
			body.setPerceptions(list ?: emptyList)
		}	
	}

	/*
	 * Compute this agent's body perceptions
	 */
	def computePerceptions(^agent : AgentBody) : List<Percept> {
		var percepts = new ArrayList<Percept>
		var frustum = ^agent.frustum
		if (frustum !== null) {
			var frustumShape = frustum.toShape(^agent.position, ^agent.direction)
			var dataIterator = this.model.dataIterator(frustumShape)
			var filteringIterator = frustum.filter(dataIterator)
			while (filteringIterator.hasNext) {
				var obj = filteringIterator.next
				percepts += new Percept(obj) 
			}
		}
		return percepts
	}

	def onAgentBodyCreated(body : AgentBody) {
		this.model.addData(body)
	}

	def onAgentBodyDestroyed(body : AgentBody) {
		this.model.removeData(body)
	}
	
	protected final def computeSteeringTranslation(obj : IMobileObject, move : Vector2d, clock : TimeManager) : Vector2d {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeSteeringTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj") 			// $NON-NLS-1$
	}

	protected final def computeKinematicTranslation(obj : IMobileObject, move : Vector2d, clock : TimeManager) : Vector2d {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj") 	// $NON-NLS-1$
	}
	
	protected final def computeKinematicRotation(obj : IMobileObject, move : double, clock : TimeManager) : double {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicRotation(move, clock)
		}
		throw new IllegalArgumentException("obj") 	// $NON-NLS-1$ 
	}

	protected final def move(obj : IMobileObject, instantTranslation : Vector2d, instantRotation : double) {
		if (obj instanceof AbstractMobileObject) {
			var duration = this.timeManager.lastStepDuration
			obj.move(instantTranslation.x, instantTranslation.y, duration, this.width, this.height)
			obj.rotate(instantRotation, duration)
			stateChanged()
		} else {
			throw new IllegalArgumentException("obj")
		}
	}

	protected def stateChanged {
		this.stateChanged.set(true)
	}

	private def createBody(type : String) {
		var id = UUID::randomUUID
		
		// Different body shapes and colors based on whether the agent is a FimuGoer, a Scene, a Toilet, etc. 
		var shape : Shape2d
		var color : Color
		if (type == "PELO" || type == "FIMUGOER")
		{
			shape = new Circle2d(0.0, 0.0, NORMAL_PERSON_SIZE)
			color = Color.ANTIQUEWHITE
		}
		else if (type == "TOILETS")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_TOILET_W, NORMAL_TOILET_H)
			color = Color.DARKKHAKI
		}
		else if (type == "DRINKSTAND" || type == "FOODSTAND")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_STAND_W, NORMAL_STAND_H)
			color = Color.AQUAMARINE
		}
		else if (type == "SCENE")
		{
			shape = new Rectangle2d(0.0, 0.0, NORMAL_SCENE_W, NORMAL_SCENE_H)
			color = Color.CADETBLUE
		}
		
		var body = new AgentBody(id,    
								 shape, // body
								 1, // max linear speed m/s
							 	 1, // max linear acceleration (m/s)/s
								 MathConstants::PI / 4, // max angular speed r/s
								 MathConstants::PI /10, // max angular acceleration (r/s)/s
								 new CircleFrustum(id, PERCEPTION_RADIUS),
								 color);
		// body.name = MessageFormat::format("Body #{0}", this.agentBodyNumber + 1)
		body.type = type 
		addAgentBody(body, randomPosition, Math::random as double * MathConstants::TWO_PI)
	}

	def createPelo() {
		createBody("PELO")
	}

	def createFimuGoer() {
		createBody("FIMUGOER")
	}

	def createScene() {
		createBody("SCENE")
	}

	def createFoodStand() {
		createBody("FOODSTAND")
	}

	def createDrinkStand() {
		createBody("DRINKSTAND")
	}

	def createToilets() {
		createBody("TOILETS")
	}

	protected def randomPosition : Point2d {
		var x = Math::random as double * this.width - NORMAL_PERSON_SIZE
		var y = Math::random as double * this.height - NORMAL_PERSON_SIZE
		return new Point2d(x, y)
	}

	protected synchronized def addAgentBody(body : AgentBody, position : Point2d, direction : double) {
		if (this.init.get) {
			synchronized (this.agentBodyList) {
				this.agentBodyList.put(body.id, body)
			}
			if(body.shape instanceof Circle2d){
				(body.shape as Circle2d).center = position
			}
			if (body.shape instanceof Rectangle2d) {
				(body.shape as Rectangle2d).center = position
			}
			body.position = position
			body.angle = direction
			body.onAgentBodyCreated
		} else {
			throw new IllegalStateException("You cannot call this function after the start of the simulation");
		}
	}

	def getAgentBodyNumber : int {
		synchronized (this.agentBodyList) {
			return this.agentBodyList.size
		}
	}

	def addListener(listener : EventListener) {
			this.listener = listener
	}
}
