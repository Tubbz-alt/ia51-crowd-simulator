package io.sarl.fimu.environment

import java.util.UUID

import org.arakhne.afc.math.geometry.d2.d.Vector2d


/**
 * Abstract implementation of a motion influence.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class MotionInfluence extends Influence {

	val linearInfluence = new Vector2d
	var angularInfluence : double
	
	/**
	 * @param type indicates if the influence is kinematic or steering.
	 * @param influencedObject is the influenced object.
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 */
	new (influencedObject : UUID = null, linearInfluence : Vector2d = null, angularInfluence : double = 0) {
		super(influencedObject)
		if (linearInfluence !== null) {
			this.linearInfluence.set(linearInfluence)
		}
		this.angularInfluence = angularInfluence
	}

	/** Set the linear influence.
	 * 
	 * @param l is the linear influence
	 */
	def setLinarInfluence(l : Vector2d) {
		//TODO assert(l!=null);
		this.linearInfluence.set(l)
	}
		
	/** Set the linear influence.
	 * 
	 * @param dx is the linear influence
	 * @param dy is the linear influence
	 */
	def setLinarInfluence(dx : double, dy : double) {
		this.linearInfluence.set(dx, dy)
	}

	/** Set the angular influence.
	 * 
	 * @param a
	 */
	def setAngularInfluence(a : double) {
		this.angularInfluence = a
	}

	/** Replies the linear influence.
	 * 
	 * @return the linear influence
	 */
	def getLinearInfluence : Vector2d {
		this.linearInfluence
	}
		
	/** Replies the angular influence.
	 * 
	 * @return the angular influence
	 */
	def getAngularInfluence : double {
		this.angularInfluence
	}
	
	override toString : String {
		this.linearInfluence + "|" + this.angularInfluence
	}

}
