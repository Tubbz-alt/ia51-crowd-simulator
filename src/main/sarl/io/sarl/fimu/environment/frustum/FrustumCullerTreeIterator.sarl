/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.frustum

import io.sarl.fimu.environment.IShapedObject
import io.sarl.fimu.utils.tree.SpatialTreeNode
import java.util.Iterator
import java.util.LinkedList
import java.util.List
import java.util.NoSuchElementException
import java.util.Stack
import org.arakhne.afc.math.geometry.d2.d.Shape2d

/**
 * Frustum culler tree iterator.
 * 
 * @param <D> - type of the data in the nodes.
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class FrustumCullerTreeIterator<D extends IShapedObject> implements Iterator<D> {

	val fieldOfView : Shape2d<?>
	val stack = new Stack<SpatialTreeNode<?, D>>
	val nexts : List<D> = new LinkedList
	
	/**
	 * @param root - the root node.
	 * @param fieldOfView - field-of-view.
	 */
	new (root : SpatialTreeNode<?, D>, fieldOfView : Shape2d<?>) {
		this.fieldOfView = fieldOfView;
		if (root !== null) {
			this.stack.push(root);
		}
		searchNext
	}
	
	private def searchNext {
		if (this.nexts.isEmpty) {
			while (this.nexts.isEmpty && !this.stack.isEmpty) {
				var n = this.stack.pop
				for (data : n.data) {
					if (data !== null) {
						var objectBounds = data.shape
						if (this.fieldOfView.intersects(objectBounds)) {
							this.nexts += data
						}
					}
				}
				for (node : n.children) {
					if (node !== null && this.fieldOfView.intersects(node.bounds)) {
						this.stack += node
					}
				}
			}
		}
	}
	
	override hasNext : boolean {
		!this.nexts.isEmpty
	}

	override next : D {
		if (this.nexts.isEmpty) {
			throw new NoSuchElementException
		}
		var n = this.nexts.remove(0)
		searchNext
		return n
	}

}