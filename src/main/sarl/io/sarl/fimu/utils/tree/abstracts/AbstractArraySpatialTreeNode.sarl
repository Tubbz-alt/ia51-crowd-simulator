/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package io.sarl.fimu.utils.tree.abstracts

import io.sarl.fimu.environment.IShapedObject
import io.sarl.fimu.environment.MotionHull
import java.util.ArrayList
import java.util.Collections
import java.util.Iterator
import java.util.List
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d

/**
 * Definition of a tree node that uses an array for storing the children.
 * 
 * @param <D> - type of the data in the node.
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractArraySpatialTreeNode<N extends AbstractArraySpatialTreeNode<N, D>, D extends IShapedObject> extends AbstractSpatialTreeNode<N, D> { 

	/** Array of the child nodes.
	 */
	protected var children : N[]

	/** 
	 * @param bounds the bounds covered by the node.
	 */
	new (bounds : Rectangle2d = null) {
		super(bounds)
	}

	override addData(data : D) : boolean {
		if (this.leaf) {
			// Static beurk beurk
			var maxObjectsPerNode = this.tree.nodeFactory.maxDataCountPerNode
			if (this.dataCount >= maxObjectsPerNode) {
				// Split the node and move all the objects into the children
				createChildren
				var iterator = this.internalDataStructure.iterator
				while (iterator.hasNext) {
					var existingData = iterator.next
					if (existingData.addInChildWhenPossible) {
						iterator.remove
					}
				}
				if (!data.addInChildWhenPossible) {
					return (this.internalDataStructure += data)
				}
			} else {
				// Enough space in this node.
				return (this.internalDataStructure += data)
			}
		} else if (!data.addInChildWhenPossible) {
			return (this.internalDataStructure += data)
		}
		return true
	}

	private def addInChildWhenPossible(data : D) : boolean {
		// TODO assert (this.children != null);
		var dataShape = data.shape
		if(dataShape instanceof MotionHull){
			dataShape = dataShape.getBounds
		}
		var selectedChild : N
		for (child : this.children) {
			if (child.bounds.intersects(dataShape) || child.bounds.contains(dataShape)) {
				if (selectedChild !== null) {
					// The object is intersecting two or more children
					return false
				}
				selectedChild = child
			}
		}
		if (selectedChild !== null) {
			return selectedChild.addData(data)
		}
		// No intersection between the children and the data
		return false
	}

	override removeData(data : D) : boolean {
		var removed = true
		if (this.leaf) {
			removed = (this.internalDataStructure -= data)
		} else {
			if (!data.removeFromChildWhenPossible) {
				removed = (this.internalDataStructure -= data)
			}
		}
		if (removed) {
			removeChildrenIfEmpty
		}
		return removed
	}

	private def removeChildrenIfEmpty : boolean {
		if (this.children !== null) {
			for (i : 0..<this.children.length) {
				if (this.children.get(i) !== null
						&& !this.children.get(i).isEmpty) {
					return false
				}
			}
			for (i : 0..<this.children.length) {
				if (this.children.get(i) !== null) {
					// TODO assert (this.children[i].getDataCount() == 0);
					this.children.get(i).parent = null
					this.children.set(i, null)
				}
			}
			this.children = null
			return true
		}
		return false
	}

	private def removeFromChildWhenPossible(data : D) : boolean {
		// TODO assert (this.children != null);
		var dataShape = data.shape
		if (dataShape instanceof MotionHull) {
			dataShape = dataShape.getBounds
		}
		var selectedChild : N
		for (child : this.children) {
			if (child.bounds.intersects(dataShape) || child.bounds.contains(dataShape)) {
				if (selectedChild !== null) {
					// The object is intersecting two or more children
					return false
				}
				selectedChild = child
			}
		}
		if (selectedChild !== null) {
			return selectedChild.removeData(data)
		}
		// No intersection between the children and the data
		return false
	}

	override isLeaf : boolean {
		this.children === null
	}

	override isEmpty : boolean {
		this.leaf && this.dataCount == 0
	}

	override def removeChildren {
		if (this.children !== null) {
			for (i : 0..<this.children.length) {
				if (this.children.get(i) !== null) {
					this.children.get(i).parent = null
					this.children.set(i, null)
				}
			}
			this.children = null
		}
	}

	override getChildren : List<N> {
		var nodes = new ArrayList<N>(4)
		if (this.children !== null) {
			for (i  : 0..<this.children.length) {
				if (this.children.get(i) !== null) {
					nodes += this.children.get(i)
				}
			}
		}
		return Collections::unmodifiableList(nodes)
	}

	override toString : String {
		this.bounds.toString + "=>" + super.toString
	}

	override iterator : Iterator<N> {
		return new ChildIterator(this)
	}

	/**
	 * @param <D> - the type of the objects in the node.
	 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
	 * @version $Name$ $Revision$ $Date$
	 */
	private static class ChildIterator<N extends AbstractArraySpatialTreeNode<N, D>, D extends IShapedObject> implements Iterator<N> {

		val parent : AbstractArraySpatialTreeNode<N, D>;
		var n = 0
		var next : N

		/**
		 */
		new (parent : AbstractArraySpatialTreeNode<N, D>) {
			this.parent = parent
			if(parent.children === null){
				next = parent as N
			}else{
				searchNext
			}
		}

		private def searchNext {
			this.next = null;
			if(this.parent.children !== null){
				while (this.n < this.parent.children.length && this.next === null) {
					var c = this.parent.children.get(this.n)
					if (c !== null) {
						this.next = c
					}
					this.n++
				}
			}
		}

		override hasNext : boolean {
			this.next !== null
		}

		override next : N {
			var n = this.next
			searchNext
			return n
		}

	}

}
