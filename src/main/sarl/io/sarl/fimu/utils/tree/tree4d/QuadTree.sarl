/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package io.sarl.fimu.utils.tree.tree4d

import io.sarl.fimu.environment.IShapedObject
import io.sarl.fimu.utils.tree.SpatialTreeNodeFactory
import io.sarl.fimu.utils.tree.abstracts.AbstractSpatialTree
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import io.sarl.fimu.utils.tree.SpatialTree

/**
 * Definition of a quadtree.
 * 
 * @param <D> - the type of data in the tree.
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class QuadTree<D extends IShapedObject> extends AbstractSpatialTree<QuadTreeNode<D>, D> {

	/**
	 */
	new {
		super(new QuadTreeNodeFactory)
	}

	/**
	 * @param <D> - the type of data in the tree.
	 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
	 * @version $Name$ $Revision$ $Date$
	 */
	private static class QuadTreeNodeFactory<D extends IShapedObject> implements SpatialTreeNodeFactory<QuadTreeNode<D>> {
		var tree : QuadTree<D>
		
		override newInstance(bounds : Rectangle2d, parent : QuadTreeNode<D>) : QuadTreeNode<D> {
			var q = new QuadTreeNode(bounds)
			q.setTree(tree)
			q
		}
		
		override getMaxDataCountPerNode : int {
			1
		}
	
		override setTree(t : SpatialTree) {
			this.tree = t as QuadTree<D>
		}
	
}

}
