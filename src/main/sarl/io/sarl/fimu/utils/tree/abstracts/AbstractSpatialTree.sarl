/* 
 * $Id$
 * 
 * Copyright (c) 2011-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package io.sarl.fimu.utils.tree.abstracts

import fr.utbm.info.ia51.general.frustum.FrustumCullerTreeIterator
import io.sarl.fimu.environment.IShapedObject
import io.sarl.fimu.utils.tree.SpatialTree
import io.sarl.fimu.utils.tree.SpatialTreeNode
import io.sarl.fimu.utils.tree.SpatialTreeNodeFactory
import io.sarl.fimu.utils.tree.iterator.DepthFirstObjectTreeIterator
import io.sarl.fimu.utils.tree.iterator.DepthFirstTreeIterator
import java.io.ObjectInputStream
import java.util.Iterator
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.geometry.d2.d.Shape2d

/**
 * Abstract definition of a spatial tree.
 * 
 * @param <N> - type of the root node.
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractSpatialTree<N extends SpatialTreeNode<N, D>, D extends IShapedObject> implements SpatialTree<N, D> {

	var factory : SpatialTreeNodeFactory<N> 
	var root : N
	
	/**
	 * @param factory the node factory to use.
	 */
	new (factory : SpatialTreeNodeFactory<N>) {
		//TODO assert (factory != null);
		this.factory = factory;
	}
	
	private def readObject(stream : ObjectInputStream) {
		stream.defaultReadObject
		for (node : this) {
			(node as AbstractSpatialTreeNode<N, D>).tree = this as SpatialTree<N, D>
		}
    }
	
	override addData(data : D) : boolean {
		if (data === null) {
			return false
		}
		var root = getRoot
		if (root !== null) {
			return root.addData(data)
		}
		return false
	}
	
	override removeData(data : D) : boolean {
		if (data === null) {
			return false
		}
		var root = getRoot
		if (root !== null) {
			return root.removeData(data)
		}
		return false
	}
	
	override getBounds : Rectangle2d {
		var root = getRoot
		if (root === null) {
			return new Rectangle2d
		}
		return root.bounds
	}
	
	override getRoot : N {
		this.root
	}

	def setRoot(root : N) {
		if (this.root instanceof AbstractSpatialTreeNode<?, ?>) {
			(this.root as AbstractSpatialTreeNode<N, D>).tree = null
		}
		this.root = root
		if (this.root instanceof AbstractSpatialTreeNode<?, ?>) {
			(this.root as AbstractSpatialTreeNode<N, D>).tree = this as SpatialTree<N, D>
		}
	}

	override iterator : Iterator<N> {
		new DepthFirstTreeIterator(getRoot)
	}

	override getNodeFactory : SpatialTreeNodeFactory<N> {
		this.factory
	}
	
	override setNodeFactory(factory : SpatialTreeNodeFactory<N>) {
		this.factory = factory
	}

	override initialize(worldSize : Rectangle2d) {
		this.root = this.nodeFactory.newInstance(worldSize, null)
	}

	override dataIterator : Iterator<D> {
		new DepthFirstObjectTreeIterator(getRoot)
	}
	
	override dataIterator(bounds : Shape2d<?>) : Iterator<D> {
		new FrustumCullerTreeIterator(getRoot, bounds)
	}

	override getData : Iterable<D> {
		[ dataIterator ]
	}

}
