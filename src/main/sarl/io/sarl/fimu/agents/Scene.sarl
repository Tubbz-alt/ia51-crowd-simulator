/** 
 * 
 */
package io.sarl.fimu.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.fimu.agents.MusicTaste
import io.sarl.fimu.agents.actions.PhysicEnvironmentCapacity
import io.sarl.fimu.agents.actions.PhysicEnvironmentSkill
import io.sarl.core.Initialize
import io.sarl.fimu.agents.behaviors.KinematicSeekBehavior
import io.sarl.fimu.agents.behaviors.KinematicWanderBehavior
import io.sarl.fimu.environment.DynamicType
import io.sarl.fimu.environment.Influence
import io.sarl.fimu.environment.Percept
import java.util.List
import io.sarl.fimu.events.PerceptionEvent
import io.sarl.fimu.events.SimulationAgentReady
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author Fran√ßois
 * 
 */
agent Scene {
	uses Logging
	
	var genre : MusicTaste
	
	def getGenre() {
		genre
	}

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	def doNothing {

	}

	/** 
	 * SUBJECT TO CHANGE TO FIT THE NEEDS OF THIS SPECIFIC TYPE OF AGENT
	 */

	on PerceptionEvent {

	}

	def emitInfluence(output : MotionAlgorithmOutput, influences : Influence*) {

	}

	def first(list : List<Percept>) : Percept {
		if(list.isEmpty) null else list.get(0)
	}

		//	on PerceptionEvent {
	// var target = occurrence.perceptions.extractTarget
		//
	// if (target !== null) {
	// // run the seek behaviour
	// this.seekBehaviour.run(
	// occurrence.body.position,
	// occurrence.body.currentLinearSpeed,
// occurrence.body.maxLinear,
	//				target.position
	// ).emitInfluence
	//		} else {
	// doNothing
	//			// // run the wander behaviour
	// // this.wanderBehaviour.run(
	//			// occurrence.body.position,
	// // occurrence.body.direction,
	//			// occurrence.body.currentLinearSpeed,
	// // occurrence.body.maxLinear,
	//			// occurrence.body.currentAngularSpeed,
	// // occurrence.body.maxAngular
	//			// ).emitInfluence
	// }
	//	}
}
