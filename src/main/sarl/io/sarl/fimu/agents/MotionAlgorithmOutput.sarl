package io.sarl.fimu.agents

import java.io.Serializable

import io.sarl.fimu.environment.DynamicType
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/**
 * Output of a behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class MotionAlgorithmOutput implements Serializable {

	val type : DynamicType 
	val linear = new Vector2d
	var angular = 0.0
	
	/**
	 * @param type is the type of the output.
	 */
	new (type : DynamicType) {
		this.type = type;
	}
	
	/**
	 * @param outputToCopy is the output tp copy.
	 */
	new (outputToCopy : MotionAlgorithmOutput) {
		// TODO assert(outputToCopy!=null);
		this.type = outputToCopy.type
		this.linear.set(outputToCopy.linear)
		this.angular = outputToCopy.angular
	}

	/** Replies the type of the output.
	 * 
	 * @return the type of the output.
	 */
	def getType : DynamicType {
		this.type
	}
	
	/** Replies the linear output.
	 * 
	 * @return the linear output.
	 */
	def getLinear : Vector2d {
		this.linear
	}
	
	/** Replies the angular output.
	 * 
	 * @return the angular output.
	 */
	def getAngular : double {
		this.angular
	}
	
	/** Set the linear output.
	 * 
	 * @param linear
	 */
	def setLinear(linear : Vector2d) {
		// TODO assert(linear!=null);
		this.linear.set(linear)
	}
	
	/** Set the linear output.
	 * 
	 * @param dx
	 * @param dy
	 */
	def setLinear(dx : double, dy : double) {
		this.linear.set(dx, dy)
	}

	/** Set the angular output.
	 * 
	 * @param angular
	 */
	def setAngular(angular : double) {
		this.angular = angular
	}

	/** Set the linear output.
	 * 
	 * @param outputToCopy
	 */
	def setLinear(outputToCopy : MotionAlgorithmOutput) {
		if (outputToCopy !== null) {
			if (outputToCopy.type != this.type) {
				throw new IllegalArgumentException
			}
			this.linear.set(outputToCopy.linear)
		}
	}

	/** Set the angular output.
	 * 
	 * @param outputToCopy
	 */
	def setAngular(outputToCopy : MotionAlgorithmOutput) {
		if (outputToCopy !== null) {
			if (outputToCopy.type != this.type) {
				throw new IllegalArgumentException
			}
			this.angular = outputToCopy.angular
		}
	}

	/** Set the linear and angular output.
	 * 
	 * @param outputToCopy
	 */
	def set(outputToCopy : MotionAlgorithmOutput) {
		if (outputToCopy !== null) {
			if (outputToCopy.type != this.type) {
				throw new IllegalArgumentException
			}
			this.linear.set(outputToCopy.linear)
			this.angular = outputToCopy.angular
		}
	}
	
	override toString : String {
		"l=" + this.linear.toString() + "; a=" + this.angular
	}

}
