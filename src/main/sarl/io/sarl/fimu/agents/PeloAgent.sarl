package io.sarl.fimu.agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.fimu.agents.actions.PhysicEnvironmentCapacity
import io.sarl.fimu.agents.actions.PhysicEnvironmentSkill
import io.sarl.fimu.agents.behaviors.KinematicWanderBehavior
import io.sarl.fimu.environment.Influence
import io.sarl.fimu.environment.Percept
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.fimu.events.PerceptionEvent
import java.util.List
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/*
 * This is just an example agent
 */
agent PeloAgent {
	uses Logging, PhysicEnvironmentCapacity, DefaultContextInteractions, Lifecycle

	var wanderBehavior : KinematicWanderBehavior
	var frozen : boolean
	var environmentID : UUID
	var spaceID : UUID
	
	on Initialize {
		environmentID = occurrence.parameters.get(1) as UUID
		spaceID = occurrence.parameters.get(0) as UUID
		var physicSkill = new PhysicEnvironmentSkill(spaceID, environmentID )
		setSkill(physicSkill, PhysicEnvironmentCapacity)
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		this.wanderBehavior = new KinematicWanderBehavior
		this.frozen = false
		//emit(new SimulationAgentReady)
		info("The agent was started.")
	}

	on Freeze {
		this.frozen = occurrence.value
	}
	/*
	 * Only exit if the event if from the environment 
	 */
	on Exit [isFrom(environmentID)] {
		frozen = true
		new Exit().emit()
		killMe
	}

	/*
	 * BEYOND THIS POINT THE CODE SHOULD PROBABLY BE GENERALIZED TO MOVING AGENTS
	 */
	def doNothing {
		influenceKinematic(new Vector2d, 0.0)
	}
	
	on PerceptionEvent[!frozen] {
//		var target = occurrence.perceptions.first
			emitInfluence(
				this.wanderBehavior.run(
					occurrence.body.position,
					occurrence.body.direction,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinearSpeed,
					occurrence.body.currentAngularSpeed,
					occurrence.body.maxAngularSpeed)
				)/*,
				new TypeChangeInfluence("BODY")*/
//			)

	// For testing purpose...
	//doNothing
	}

	def emitInfluence(output : MotionAlgorithmOutput, influences : Influence*) {
		influenceKinematic(output.linear, output.angular, influences);
	}

	def first(list : List<Percept>) : Percept {
		if(list.isEmpty) null else list.get(0)
	}
}
