package io.sarl.fimu.agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.fimu.agents.actions.PhysicEnvironmentCapacity
import io.sarl.fimu.agents.actions.PhysicEnvironmentSkill
import io.sarl.fimu.agents.behaviors.KinematicSeekBehavior
import io.sarl.fimu.agents.behaviors.KinematicWanderBehavior
import io.sarl.fimu.environment.Influence
import io.sarl.fimu.environment.Percept
import io.sarl.fimu.events.PerceptionEvent
import java.util.ArrayList
import java.util.List
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/**
 * @author François
 * 
 */

/**
 * Class for an agent who goes to attend concerts at the FIMU
 * 
 * Such agents have different meters that represent their needs (hunger, thirst, etc).
 * The decision process is a simple algorithm (no decision tree, no MDP, sorry :( ) which works as follows:
 * - eat and drink if needed
 * - pee if needed
 * - talk (or fight if drunk) if desired
 * - attend concerts otherwise
 * -
 * -
 * -
 * - maybe a bonus depending on the advancement of the project :)
 */

agent FimuGoer {
	uses Logging, PhysicEnvironmentCapacity, DefaultContextInteractions

	var seekBehaviour : KinematicSeekBehavior
	var wanderBehaviour : KinematicWanderBehavior
	/** 
	 * Meters range from 0 to 100 (think of percentages)
	 * hungerMeter = 100 -> "I'm 100% hungry"           -> "I'm starving" :'(
	 * thirstMeter = 100 -> "I'm 100% thirsty"          -> "My mouth is as dry as Sahara right now"
	 * peeMeter    = 100 -> "I 100% need to pee"        -> "I'm going to wet my pants"
	 * drunkMeter  = 100 -> "I'm 94375873432186% drunk" -> "azihm aigmaegub h!rmgm psçvujhkl" ¤¤¤
	 * talkMeter   = 100 -> "I'm 100% talkative"        -> "I need to find someone whom to tell every single thing about my life"
	 * 
	 * ¤¤¤ : I should throw punches at random people to show them how much I love them
	 */
	var hungerMeter : int
	var thirstMeter : int
	var peeMeter : int
	var drunkMeter : int
	var talkMeter : int
	
	/**
	 * An agent has core-defined music taste that never changes (musicTaste),
	 * but it also has one that can change during the simulation, depending on multiple parameters (currentMood)
	 */
	var musicTaste : MusicTaste
	var currentMood : MusicTaste

	/** 
	 * An agent has a top need, and other "why-not" needs that can be satisfied on the fly
	 */
	var currentNeed : Need
	var mayBeNeeded : ArrayList<Need>
	var inhibitSecondaryNeeds : boolean
	
	/* EVENT HANDLERS */

	on Initialize {
		var physicSkill = new PhysicEnvironmentSkill(occurrence.parameters.get(0) as UUID,
			occurrence.parameters.get(1) as UUID)
		setSkill(physicSkill, PhysicEnvironmentCapacity)
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		this.wanderBehaviour = new KinematicWanderBehavior
		this.seekBehaviour = new KinematicSeekBehavior
		// emit(new SimulationAgentReady)
		info("The agent was started.")
		
		mayBeNeeded = new ArrayList<Need>
		musicTaste = new MusicTaste
		currentMood = new MusicTaste
		randomMusicTaste
		analyzeNeeds
	}

	/**
	 * METHODS
	 */
	 
	 def randomMusicTaste() {
		// Fills the music taste with genre values comprised between -10 and 10
		for (g : Genre.values()) {
			val likeVal = (((Math::random as double) * 21) - 10) as int
			musicTaste.set(g, likeVal)
		}
	}
	
	/**
	 * Will find what the agent needs depending on its meters
	 */ 
	def analyzeNeeds() {
		// Defined priority order: drink > pee > eat > talk > attend concerts
		if (thirstMeter > 70) {
			currentNeed = Need.WATER
			if (thirstMeter > 90)
				inhibitSecondaryNeeds = true;
		}
		else if (thirstMeter > 40)
		{
			if (!mayBeNeeded.contains(Need.WATER))
				mayBeNeeded.add(Need.WATER)
		}
		
		else if (peeMeter > 70)
		{
			currentNeed = Need.TOILETS
			if (peeMeter > 90)
				inhibitSecondaryNeeds = true;
		}
		else if (peeMeter > 40)
		{
			if (!mayBeNeeded.contains(Need.TOILETS))
				mayBeNeeded.add(Need.TOILETS)
		}
		
		else if (hungerMeter > 70)
		{
			currentNeed = Need.FOOD
			if (hungerMeter > 90)
				inhibitSecondaryNeeds = true;
		}
		else if (hungerMeter > 40)
		{
			if (!mayBeNeeded.contains(Need.FOOD))
				mayBeNeeded.add(Need.FOOD)
		}
		
		// No "might need" for concerts, because Scene are more complicated than just Toilets and Stands
		// No "might need" for talk neither, because the agent would constantly be distracted by others
		else if (talkMeter > 70)
		{
			currentNeed = Need.TALK
			if (talkMeter > 90)
				inhibitSecondaryNeeds = true;
		}
		else {
			currentNeed = Need.CONCERT
		}
	}
	
	/**
	 * Delegates tasks to other functions according to the needs
	 */
	def resolveNeeds() {

	}
	
	/**
	 * Having everything fragmented in resolvers allows specific processing depending on other parameters
	 * Edit: it finally turned out this was a bad design which will probably never be used in the project 
	 */
	
	def thirstResolver() {

	}
	
	def hungerResolver() {

	}

	def toiletResolver() {

	}
	
	def concertResolver() {

	}
	
	def talkResolver() {
		//wanderBehaviour.run( ... )
	}
	
	/**
	 * Analyzers return the position of the n-ranked nearest requested type of agent
	 * If the rank is -1, a random agent is returned
	 * Same as before: bad design that will most likely never be used
	 */
	def analyzeToilets(rank : int) : Point2d {

	}

	def analyzeFoodStands(rank : int) : Point2d {

	}

	def analyzeDrinkStands(rank : int) : Point2d {

	}

	def analyzeScenes(rank : int) : Point2d {

	}
	
	def getMusicState() : MusicTaste {
		return musicTaste;
	}
	
	/**
	 * TO REFACTOR
	 * This is to be rewritten to fit the influence system
	 * Probably bad design again lulz
	 */
	 
	def moveTo(newPos : Point2d) {
		
	}
	
	def obtain(what : Need) {
		
	}
	
	def engageConv(other : FimuGoer) {
		
	}
	
	def fight(other : FimuGoer) {
		
	}
	
	def gather(other : FimuGoer) {
		
	}

//	def extractTarget(percepts : List<Percept>) : Percept {
//		var targets = percepts.filter[it.type == "TARGET"]
//		if (targets.empty) {
//			null
//		} else {
//			targets.get(0)
//		}
//	}
		
	def doNothing {
		influenceKinematic(new Vector2d, 0.0)
	}

	/**
	 * SUBJECT TO CHANGE TO FIT THE NEEDS OF THIS SPECIFIC TYPE OF AGENT
	 */

	/* Decide what to do based on what is perceived. In the event :
	 * - perceptions : any object that is perceived
	 * - body : this agent's body
	 */
	on PerceptionEvent {
		//Retrieve target, then type of agent
		var target = occurrence.perceptions.first
		if (target !== null)
		{
			var type = target.type as String
			var output : MotionAlgorithmOutput
			
			switch(type)
			{
				case "FOODSTAND":
					if ((currentNeed == Need.FOOD || mayBeNeeded.contains(Need.FOOD)) && !inhibitSecondaryNeeds)
					{
						output = seekBehaviour.run(occurrence.body.position, occurrence.body.currentLinearSpeed,
							occurrence.body.maxLinearSpeed, target.position)
					}
				case "DRINKSTAND":
					if ((currentNeed == Need.WATER || mayBeNeeded.contains(Need.WATER)) && !inhibitSecondaryNeeds)
					{
						output = seekBehaviour.run(occurrence.body.position, occurrence.body.currentLinearSpeed,
							occurrence.body.maxLinearSpeed, target.position)
					}
				case "TOILETS":
					if ((currentNeed == Need.TOILETS || mayBeNeeded.contains(Need.TOILETS)) && !inhibitSecondaryNeeds)
					{
						output = seekBehaviour.run(occurrence.body.position, occurrence.body.currentLinearSpeed,
							occurrence.body.maxLinearSpeed, target.position)
					}
				case "SCENE":
					if ((currentNeed == Need.CONCERT || mayBeNeeded.contains(Need.CONCERT)) && !inhibitSecondaryNeeds)
					{
						//TODO: check whether this scene plays something the agent likes
						output = seekBehaviour.run(occurrence.body.position, occurrence.body.currentLinearSpeed,
							occurrence.body.maxLinearSpeed, target.position)
					}
				case "FIMUGOER":
					if ((currentNeed == Need.TALK || mayBeNeeded.contains(Need.TALK)) && !inhibitSecondaryNeeds)
					{
						output = seekBehaviour.run(occurrence.body.position, occurrence.body.currentLinearSpeed,
							occurrence.body.maxLinearSpeed, target.position)
					}
				// There is no default case, because the agent acts 50% based on what it perceives, 50% based on what it needs
				// Needs are re-analyzed each time this handler runs
				// It will always have something to do, and if it falls through all of previous cases, it will stick to its previous target
			}
			analyzeNeeds
		}
	}

	def emitInfluence(output : MotionAlgorithmOutput, influences : Influence*) {
		if (output !== null) {
			influenceKinematic(output.linear, output.angular, influences);
		}
	}

	def first(list : List<Percept>) : Percept {
		if(list.isEmpty) null else list.get(0)
	}

	//	on PerceptionEvent {
	// var target = occurrence.perceptions.extractTarget
//
//		if (target !== null) {
//			// run the seek behaviour
//			this.seekBehaviour.run(
//				occurrence.body.position,
//				occurrence.body.currentLinearSpeed,
//				occurrence.body.maxLinear,
//				target.position
//			).emitInfluence
//		} else {
//			doNothing
//			// // run the wander behaviour
//			// this.wanderBehaviour.run(
//			// occurrence.body.position,
//			// occurrence.body.direction,
//			// occurrence.body.currentLinearSpeed,
//			// occurrence.body.maxLinear,
//			// occurrence.body.currentAngularSpeed,
//			// occurrence.body.maxAngular
//			// ).emitInfluence
//		}
//	}

}
