/** 
 * 
 */
package io.sarl.fimu.agents

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.fimu.environment.AgentBodyMapper
import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.Percept
import io.sarl.fimu.events.CreateArea
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.fimu.events.InfluenceEvent
import io.sarl.fimu.events.PerceptionEvent
import io.sarl.fimu.gui.FXMLViewerController
import io.sarl.fimu.utils.time.TimePercept
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.List
import java.util.UUID

/** 
 * @author Léon
 * 
 */
agent EnvironmentAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, Behaviors, InnerContextAccess

	var exited = false
	var maxWidth = 10.0
	var freeze : boolean
	var environment : Environment
	var ^space : OpenEventSpace
	var influences : int
	
	var mapper : AgentBodyMapper
	var ctrl : FXMLViewerController
	
	
	on Initialize {

		this.ctrl = occurrence.parameters.get(0) as FXMLViewerController
		this.environment = occurrence.parameters.get(1) as Environment
		this.mapper = (occurrence.parameters.get(2) as AgentBodyMapper)

		// Create a specific space for the GUI controller
		var ispace = defaultContext.createSpace(OpenEventSpaceSpecification, UUID.randomUUID)
		ctrl.setGUISpace(ispace)
		ispace.register(asEventListener)
		environment.addListener(ctrl)
		
		//This would draw the agents body if there were any
		//ctrl.draw()
		
		//Tell the simulator agent that we are ready to rock
		//emit(new SimulationAgentReady)
	}
	 
	 /* 
	 * Create and configure every RocketLauncher
	 */
	on CreateArea {
		// create a bunch of test agents
		environment.createFimuGoer
		environment.createFimuGoer
		environment.createToilets
		environment.createDrinkStand
		environment.createScene
		
		// Pas sûr du premier arguement
		var agentParameters : List<Object> = newArrayList(getDefaultSpace.getSpaceID.ID, this.ID)
		info(getDefaultSpace.getSpaceID.ID)
		for (body : environment.agentBodies) {
			var agentType = mapper.getAgentTypeForBody(body)
			spawnInContextWithID(agentType, body.id, getDefaultContext, agentParameters.toArray)
		}
		
		//This probably has to change
		//ctrl.draw()
		runBehavior
	}
		
//	on StopSimulation {
//		killMe
	//	}

	/* 
	 * Transmit Freeze signal
	 */
	on Freeze [!isFromMe(occurrence)] {
		getDefaultSpace.emit(occurrence)
		this.freeze = occurrence.value
		if(this.freeze == false){
			runBehavior
		}
	}

	on Exit [!hasMemberAgent] {
		killMe
	}
	/*
	 * Transmit Exit signal to all inner agent
	 */
	on Exit [hasMemberAgent && !exited] {
		exited = true
		getDefaultSpace.emit(new Exit)
	}
	
	/*
	 * Run one simulation step : 
	 *  - consume and apply previously received influences
	 * 	- 
	 */
	
	def runBehavior {
		this.freeze = true
		try {
			this.influences = 0
			this.environment.runBehavior
			var delay = this.environment.timeManager.simulationDelay as long
				 if (delay > 0) {
			 Thread::sleep(delay)
			 }
		} finally {
			this.freeze = false
		}
		
		notifyAgents
	}

	/* 
	 * Notify all the agents that the next step has begun, and tell them what they can perceive 
	 */
	def notifyAgents {
//		var run = false
		 val timePercept = new TimePercept(this.environment.timeManager.currentTime,
		 this.environment.timeManager.lastStepDuration)
		for (body : this.environment.agentBodies) {
//			run = true
			var ^event = new PerceptionEvent(body.perceivedObjects, new Percept(body), timePercept)
			^event.source = defaultSpace.getAddress(ID)
			//Send each agent body a percept event
			//Maybe inner context ? We'll see later
			getDefaultSpace.emit(^event)[it.UUID == body.id]
		}
//		if (!run) {
//			killMe
//		}
	}

	on InfluenceEvent [!freeze] {
		for (influence : occurrence.influences) {
			var id = influence.emitter
			if (id === null) {
				id = occurrence.source.UUID
			}
			var body = this.environment.getAgentBody(id)
			body.influence(influence)
			this.influences++
		}
		this.influences ++
		//var v = this.influences.incrementAndGet
		//
		if (this.influences >= this.environment.getAgentBodyNumber()) {
			runBehavior
		}
	}
}
