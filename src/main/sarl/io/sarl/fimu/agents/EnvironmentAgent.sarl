/** 
 * 
 */
package io.sarl.fimu.agents

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.fimu.environment.AgentBodyMapper
import io.sarl.fimu.environment.Environment
import io.sarl.fimu.environment.Percept
import io.sarl.fimu.events.CreateArea
import io.sarl.fimu.events.Exit
import io.sarl.fimu.events.Freeze
import io.sarl.fimu.events.InfluenceEvent
import io.sarl.fimu.events.PerceptionEvent
import io.sarl.fimu.gui.FXMLViewerController
import io.sarl.fimu.utils.time.TimePercept
import io.sarl.util.OpenEventSpaceSpecification
import java.util.List
import java.util.UUID

/** 
 * @author LÃ©on
 * 
 */
agent EnvironmentAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, Behaviors, InnerContextAccess

	var exited = false
	var freeze : boolean
	var environment : Environment
	var influences : int
	
	var mapper : AgentBodyMapper
	var ctrl : FXMLViewerController
	
	
	on Initialize {

		this.ctrl = occurrence.parameters.get(0) as FXMLViewerController
		this.environment = occurrence.parameters.get(1) as Environment
		this.mapper = (occurrence.parameters.get(2) as AgentBodyMapper)

		// Create a specific space for the GUI controller
		var ispace = defaultContext.createSpace(OpenEventSpaceSpecification, UUID.randomUUID)
		ctrl.setGUISpace(ispace)
		ispace.register(asEventListener)
		environment.addListener(ctrl)
	
	}
	 
	 /* 
	 * Populate the area with some agents 
	 */
	on CreateArea {
		// create a bunch of test agents
//		environment.createToilets
//		environment.createDrinkStand
		environment.createScene
		environment.createFimuGoer
		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer
//		environment.createFimuGoer

		
		var agentParameters : List<Object> = newArrayList(getDefaultSpace.getSpaceID.ID, this.ID)
		info(getDefaultSpace.getSpaceID.ID)
		for (body : environment.agentBodies) {
			var agentType = mapper.getAgentTypeForBody(body)
			spawnInContextWithID(agentType, body.id, getDefaultContext, agentParameters.toArray)
		}
		
		runBehavior
	}
		
	/* 
	 * Transmit Freeze signal
	 */
	on Freeze [!isFromMe(occurrence)] {
		getDefaultSpace.emit(occurrence)
		this.freeze = occurrence.value
		if(this.freeze == false){
			runBehavior
		}
	}

	on Exit [!hasMemberAgent] {
		killMe
	}
	/*
	 * Transmit Exit signal to all inner agent
	 */
	on Exit [hasMemberAgent && !exited] {
		exited = true
		getDefaultSpace.emit(new Exit)
	}
	
	/*
	 * Run one simulation step : 
	 *  - consume and apply previously received influences
	 * 	- 
	 */
	
	def runBehavior {
//		System.out.println("Agent bodies number : " + this.environment.agentBodyNumber)
//		System.out.println("Body list size : " + this.environment.agentBodies.size)
//		System.out.println("Tree size : "+this.environment.spatialDataStructure.data.size)
//		System.out.println()
		
		this.freeze = true
		try {
			this.influences = 0
			this.environment.runBehavior
			var delay = this.environment.timeManager.simulationDelay as long
				 if (delay > 0) {
			 Thread::sleep(delay)
			 }
		} finally {
			this.freeze = false
		}
		
		notifyAgents
	}

	/* 
	 * Notify all the agents that the next step has begun, and tell them what they can perceive 
	 */
	def notifyAgents {
		 val timePercept = new TimePercept(this.environment.timeManager.currentTime,
		 this.environment.timeManager.lastStepDuration)
		for (body : this.environment.agentBodies) {

			var ^event = new PerceptionEvent(body.perceivedObjects, new Percept(body), timePercept)
			^event.source = defaultSpace.getAddress(ID)
			//Send each agent body a percept event

			getDefaultSpace.emit(^event)[it.UUID == body.id]
		}

	}

	on InfluenceEvent [!freeze] {
		for (influence : occurrence.influences) {
			var id = influence.emitter
			if (id === null) {
				id = occurrence.source.UUID
			}
			var body = this.environment.getAgentBody(id)
			body.influence(influence)
			this.influences++
		}
		this.influences ++
		if (this.influences >= this.environment.getAgentBodyNumber()) {
			runBehavior
		}
	}
}
